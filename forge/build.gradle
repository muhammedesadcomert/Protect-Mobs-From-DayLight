buildscript {
    repositories {
        maven {
            name = 'Forge'
            url = 'https://maven.minecraftforge.net/'
        }
        maven {
            name = 'Sponge/Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'java'

archivesBaseName = "$archivesBaseName-forge"

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation project(":common")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    runs {
        client {
            workingDirectory file('run')
            args "-mixin.config=common.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'forge'
            mods {
                protectmobsfromdaylight {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('run')
            args "-mixin.config=common.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'forge'
            mods {
                protectmobsfromdaylight {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, 'forge.refmap.json'
    config 'forge.mixins.json'
}

tasks.register("replaceResources", Copy) {
    outputs.upToDateWhen { false }

    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand version: mod_version,
                forge_version_range: forge_version_range,
                forge_mc_version_range: forge_mc_version_range,
                mod_id: mod_id,
                mod_name: mod_name,
                mod_description: mod_description,
                mod_authors: mod_authors,
                mod_license: mod_license,
                logo: mod_icon,
                homepage: mod_homepage
    }

    from(project(":common").sourceSets.main.resources) {
        include 'common.mixins.json'
        expand refmap_json: 'forge.refmap.json'
        rename 'common.mixins.json', 'forge.mixins.json'
    }

    into "$buildDir/resources/main/"
}

processResources {
    from project(":common").sourceSets.main.resources
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude 'fabric.mod.json'
    finalizedBy replaceResources
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.jar.dependsOn replaceResources
tasks.compileTestJava.dependsOn replaceResources
tasks.test.dependsOn replaceResources

jar {
    exclude 'common.mixins.json'

    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : project.version,
                "Implementation-Title"    : mod_name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}